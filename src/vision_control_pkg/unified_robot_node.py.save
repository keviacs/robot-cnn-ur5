#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from sensor_msgs.msg import JointState
from std_msgs.msg import Header, String

class UnifiedRobotNode(Node):
    def __init__(self):
        super().__init__('unified_robot_node')
        
        self.joint_pub = self.create_publisher(JointState, '/joint_states', 10)
        self.detection_sub = self.create_subscription(String, '/detected_objects', self.detection_callback, 10)
        self.timer = self.create_timer(0.1, self.publish_joint_states)
        
        # Posición HOME fija
        self.current_position = [0.0, -1.57, 1.57, -1.57, -1.57, 0.0]
        self.get_logger().info("Robot iniciado en HOME")
        
    ddef detection_callback(self, msg):
    self.get_logger().info(f"Detectado: {msg.data}")
    
    if "screw" in msg.data.lower():
        self.current_position[0] = 0.5  # Mover shoulder_pan_joint a la derecha
        self.get_logger().info("Moviendo a posición SCREW")
    elif "star" in msg.data.lowe
        self.current_position[0] = 0.0  # Mantener en centro
        self.get_logger().info("Moviendo a posición STAR")
    elif "tee" in msg.data.lower():
        self.current_position[0] = -0.5  # Mover a la izquierda
        self.get_logger().info("Moviendo a posición TEE")
    
    if "screw" in msg.data.lower():
        self.current_position[0] = 0.5  # Mover shoulder_pan_joint a la derecha
        self.get_logger().info("Moviendo a posición 
        
    def publish_joint_states(self):
        msg = JointState()
        msg.header = Header()
        msg.header.stamp = self.get_clock().now().to_msg()
        msg.header.frame_id = "base_link"
        msg.name = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']
        msg.position = self.current_position
        msg.velocity = [0.0] * 6
        msg.effort = [0.0] * 6
        self.joint_pub.publish(msg)

def main(args=None):
    rclpy.init(args=args)
    node = UnifiedRobotNode()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
